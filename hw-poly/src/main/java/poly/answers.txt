## CSE 331 hw-poly Questions
## Part 0
###########################################################################

1. Multiplication Pseudocode
First define "polynomial times a term":
r = p * t, where p is a polynomial and t is a single term.
    set r = p by making a term-by-term copy of all terms in p to r.
    E: {Inv: r is q with first i terms being modified as the multiplication of that term and t}
    for each term, r_i, in r:
        substitute the multiplication of the coefficient of r_i and that of t for the coefficient of r_i.
        substitute the addition of the degree of r_i and that of t for the coefficient of r_i.
Now define multiplication over polynomials:
r = p * q,
    set r to be an empty list.
    {E: Inv: r = p * q_0 + p * q_1 + p * q_2 + ... + p * q_j-1, where q_n is the nth term in q.}
    for each term, q_i, in q:
        create m = p * q_i;
        r = r + m;



2. Division Pseudocode
r = q / v,
    set r to be an empty list.
    set rm = q by making a term-by-term copy of all terms in q to rm.
    {E: Inv: rm = q - v * r}
    set i = 0
    while the degree of the first element rm_0 in rm >= v_0 in v
        set r_i = rm_0 / v_0.
        rm = rm - v * r_i.
        i ++


3. Division Example: (x3+x-1) / (x+1) = x2-x+2
r = {}.
q = x3+x-1.
v = x+1.
rm = copy of q = x3+x-1.
    while the degree of the first element rm_0 in rm >= v_0 in v
    Iteration 1: rm_0 = x3, v_0 = x, r = {}, q = x3+x-1, v = x+1, rm = x3+x-1
        r_0 = rm_0 / v_0 = x2.
        rm = rm - v * r_0 = x3+x-1 - (x+1)*(x2) = -x2+x-1.
        i = i + 1 = 1.
    Iteration 2: rm_0 = -x2, v_0 = x, r = x2, q = x3+x-1, v = x+1, rm = -x2+x-1
        r_1 = rm_0 / v_0 = -x.
        rm = rm - v * r_1 = -x2+x-1 - (x+1) * (-x) = 2x - 1.
        i = i + 1 = 2.
    Iteration 3: rm_0 = 2x, v_0 = x, r = x2 - x, q = x3+x-1, v = x+1, rm = 2x - 1
        r_2 = rm_0 / v_0 = 2x / x = 2
        rm = rm - v * r_2 = 2x - 1 - (x+1)*(2) = -3
        i = i + 1 = 3
Now, rm_0 has a degree of 0, which is less than that of x(degree of 1), so we exit the loop.
We're done. r = x2 - x + 2.

## Part 1
###########################################################################

1. Weakened Rep Invariant
The second constructor RatNum no longer needs inner check conditions since there's no need to find gcd if reduced forms are
not needed. This will result in duplicates numbers with different denominators and numerators.

For the checkRep method, we should delete the check for the lowest form since it's not in the rep invariant anymore.
This will result in duplicates numbers with different denominators and numerators.

equal method will need to include gcd method in its implementation to ensure some unreduced rational number equal to their
lowest forms. This will make the process more complicated and therefore less efficient.

Similarly, toString method needs to include gcd as well to ensure the outputs are in their reduced forms, making the code
complicated and decreasing the efficiency.



2. Alternate add, sub, mul, div
There is no @modifies claus in either of these four methods, which means nothing is expected to change after the method calls.
However, after the alternation, we are changing the rational numbers that are calling the method, so we fail to meet the specification.
Similarly, the class is also implementing an immutable rational number, so changing the parameter violates the specification.


3. Constructor checkReps
All private fields can only be accessed through constructors. Methods in the class don't modify the private fields and therefore
don't violet the rep invariant, but it may call constructors to create new objects. Therefore, calling checkRep after new objects
are constructed is enough.



## Part 2
###########################################################################

1. Calls to checkRep in RatTerm
I used checkRep only at the end of the constructor. No method will get access to the private field, but rather they
will construct new instances. We only need to make sure the newly created instances don't violet the specification by
calling checkRep at the end of the construction.



## Part 3
###########################################################################

1. Calls to checkRep in RatPoly
I used checkRep at the end of the constructors, the start of methods, and the end of methods. This is because we attempt
to access or modify the field in RatPoly class by calling methods that return RatPolys. We need to make sure that new fields
still meet the specification. We also need to make sure the newly constructed instances meet the rep invariant, so we
add checkRep at the end of the constructors.


